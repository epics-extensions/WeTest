[tool.poetry]
name = "wetest"
version = "2.0.0rc1"
description = "WeTest enables you to test EPICS modules"
license = "EPICS"
authors = [
  "Francis GOHIER <francis.gohier@cea.fr>",
  "Katy SAINTIN <katy.saintin@cea.fr>",
  "Rémi NICOLE <remi.nicole@cea.fr>",
  "Victor NADOT <victor.nadot@cea.fr>",
]
maintainers = ["Rémi NICOLE <remi.nicole@cea.fr>"]
readme = "README.md"
repository = "https://github.com/epics-extensions/WeTest"
keywords = ["epics", "testing"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Testing :: Acceptance",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/epics-extensions/WeTest/issues"

[tool.poetry.scripts]
wetest = "wetest.command_line:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = ">=3.11, <4"
PyYAML = "^6.0"
colorlog = "^6.8.0"
numpy = "^1.26.0"
pyepics = "^3.5.1"
pykwalify = "^1.8.0"
reportlab = "^4.0.0"
semver = "^3.0.2"
packaging = "^23.2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"

[tool.ruff]
select = ["ALL"]
ignore = [
  # Disable type annotations for now, it would lead to too many warnings
  "ANN",
  # Leave doc comments for later,
  # as lots of functions needs to be renamed as private
  "D",
  # Also leave pathlib for later
  "PTH",

  # one-blank-line-before-class
  "D203",
  # multi-line-summary-second-line
  "D213",

  # For the formatter:

  # missing-trailing-comma
  "COM812",
  # single-line-implicit-string-concatenation
  "ISC001",
]

# https://git-cliff.org/docs/configuration
# Run:
#   git-cliff -c pyproject.toml --bump -u --prepend CHANGELOG.md
[tool.git-cliff.changelog]
header = """
# Changelog\n
All notable changes to this project are documented in this file.\n
"""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
trim = true
footer = """
<!-- generated by git-cliff -->
"""
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/epics-extensions/WeTest" },
]

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
commit_preprocessors = [
  # replace issue numbers
  { pattern = "\\(#([0-9]+)\\)", replace = "([#${1}](<REPO>/issues/${1}))" },
]
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|ci", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
  { message = "^revert", group = "Revert" },
]
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = false
tag_pattern = "v[0-9].*"
sort_commits = "oldest"
