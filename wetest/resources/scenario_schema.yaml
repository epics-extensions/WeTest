# Copyright (c) 2019 by CEA
#
# The full license specifying the redistribution, modification, usage and other
# rights and obligations is included with the distribution of this project in
# the file "LICENSE".
#
# THIS SOFTWARE IS PROVIDED AS-IS WITHOUT WARRANTY OF ANY KIND, NOT EVEN THE
# IMPLIED WARRANTY OF MERCHANTABILITY. THE AUTHOR OF THIS SOFTWARE, ASSUMES
# _NO_ RESPONSIBILITY FOR ANY CONSEQUENCE RESULTING FROM THE USE, MODIFICATION,
# OR REDISTRIBUTION OF THIS SOFTWARE.

type: map
required: yes
mapping:
    "version":
        desc: "Version is useful te check compatibility of a file and a WeTest version"
        type: map
        required: yes
        mapping:
            "major":  { type: int, required: yes }
            "minor":  { type: int, required: yes }
            "bugfix": { type: int, required: yes }

    "name":
      type: str
      desc: Top name (top name from included scenario are ignored)

    "macros":
        desc: "Macros can be defined and will be substituted throughout the file"
        type: any  # actually either a map or a sequence of map

    "include":
        desc: "A list of scenario files to include, if not specified `tests` will be appended at the end."
        type: seq
        sequence:
            - desc: "Path to a scenario file"
              type: str
            - desc: "Path to a scenario file and macros"
              type: map
              allowempty: yes  # the map can have keys which are not present in the schema, and these can map to anything.
              mapping:
                  "path":  { type: str, required: yes }
            - desc: "Path to a scenario file and macros"
              type: seq
              sequence:
                  - desc: "Path to a scenario file"
                    type: str
                    required: yes
                  - desc: "A dictionnary with one or several macro"
                    type: map
                    allowempty: yes

    "config":
        desc: "This configure the `tests` block"
        type: map
        mapping:
            "name":
              desc: Scenario Name
              type: str
              required: yes
            "type":
                type: str
                enum: ['unit', 'functional']
                desc: When `unit` is chosen, tests will be shuffled for random execution
            "prefix":     { type: str   }
            "use_prefix": { type: bool  }

            "delay":      { type: float }
            "ignore":     { type: bool  }
            "skip":       { type: bool  }
            "on_failure": { type: str, enum: [continue, pause, abort]}
            "retry":      { type: int   }

    "tests":
        desc: "Tests are described in this section"
        type: seq
        sequence:
            - desc: "A test can be composed of one or several atomic tests"
              type: map
              required: yes
              mapping:
                  "name":       { type: str, required: yes}
                  "prefix":     { type: str   }
                  "use_prefix": { type: bool, desc: whether or not to use prefix from config first}
                  "delay":      { type: float }
                  "message":    { type: str   }
                  "setter":     { type: str   }  # actually required for range and values
                  "getter":     { type: str   }  # actually required for range and values
                  "margin":
                      desc: "margin allows to set a percentage in which the value will be considered to be OK"
                      type: number
                      range:
                          min: 0
                          max: 100
                  "delta":
                      desc: "delta allows to set an interval in which the value will be considered to be OK"
                      type: number
                  "range":
                      desc: "A range is a kind of for loop"
                      type: map
                      required: no  # actually one of "range", "values" or "commands" should be set
                      mapping:
                          "start": { type: number, required: yes }
                          "stop":  { type: number, required: yes }
                          "step":
                            type: number
                            range: { min: 0 }
                            desc: space between values from start to stop, sdefaults to 1 unless lin or geom is defined
                          "lin":
                            type: number
                            range: { min: 0 }
                            desc: number of values linearly spaced between start and stop
                          "geom":
                            type: number
                            range: { min: 0 }
                            desc: number of values geometrically spaced between start and stop
                          "include_start": { type: bool }
                          "include_stop": { type: bool }
                          "sort":
                              type: any  # actually expecting a boolean or a string, see enum
                              enum: [True, False, random, reverse]
                              desc: |
                                True will result in a sorted list of values
                                False and random will result in a randomized list of values
                                reverse will result in a sorted decreasing list of values

                  "values":
                      desc: "A list of values to test"
                      type: seq
                      required: no  # actually one of "range", "values" or "commands" should be set
                      sequence:
                          - type: any  # actually expecting a numeric, string, boolean or waveform, not expecting a map
                            required: yes

                  "commands":
                      desc: "A list of arbitrary commands to test"
                      type: seq
                      required: no  # actually one of "range", "values" or "commands" should be set
                      sequence:
                          - type: map
                            mapping:
                                "name":      { type: str, required: yes }
                                "message":   { type: str }
                                "margin":
                                    desc: "margin allows to set a percentage in which the value will be considered to be OK"
                                    type: number
                                    range:
                                        min: 0
                                        max: 100
                                "delta":
                                    desc: "delta allows to set an interval in which the value will be considered to be OK"
                                    type: number
                                "setter":     { type: str   }
                                "getter":     { type: str   }
                                # values should a numeric, string, boolean or waveform, not expecting a map
                                "get_value":  { type: any   }  # not compatible with value
                                "set_value":  { type: any   }  # not compatible with value
                                "value":      { type: any   }  # not compatible with get_value or set_value
                                "delay":      { type: float }
                                "ignore":     { type: bool, desc: here it is possible to ignore a command but not to cancel ignore from test level }
                                "skip":       { type: bool  }
                                "on_failure": { type: str, enum: [continue, pause, abort]}
                                "retry":      { type: int   }
                  "finally":
                      desc: "Put back to a known configuration"
                      type: map
                      mapping:
                          "setter": { type: str, desc: "uses test setter if not provided" }
                          "value":  { type: number, required: yes }

                  "ignore": { type: bool, desc: "Whether the test should be read or not, default to False (read test fields)." }
                  "skip":   { type: bool, desc: "Whether the test should be executed or not, default to False (execute)." }

                  "on_failure":
                      type: str
                      enum: [continue, pause, abort]
                      desc: |
                        Determines what to do if a test fails
                        - continue with the other tests (default for unit type testing)
                        - pause until asked by user to continue (default for functional type testing)
                        - abort the tests altogether, no report generated
                  "retry":
                      type: int
                      desc: |
                        number of retry before marking test as failed,
                        defaults to config's `retry`, -1 for infinite number of retry